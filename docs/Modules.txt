Documentation: Blackhole modules.
Written by: Brett 'predatorfreak' Goulder.

Section 1: A basic introduction to Blackhole modules.
Blackhole, unlike it's forefather, predatorwall, uses a modular structur and thus requires
modules to function. Developers and System adminstrators are encouraged to write useful
modules and use them, so this is intended to be a crash course in Blackhole module writing.

In it's simplest form, a blackhole module is a tiny script with special headers, with .bmod
as the extension. It's incredibly simple to write a singular module to add basic rules for
something or even a complex module to support a system adminstrator/developer desired feature.

Section 2: Header information.
Blackhole modules are required to by marked with four commented fields, which serve as header
information. This technically could be placed anywhere in the file since Blackhole uses grep
to parse the files, but in order to maintain readability I suggest placing it at the top.

Here are the four required fields:

# NAME:
NAME serves to tell Blackhole the modules name, this should be equal to the modules filename
excluding .bmod.

# VERSION:
VERSION serves to tell Blackhole the modules version, my practice is a brand new module
should be "0.1", once it is properly tested it should be "1.0", I know it seems like a massive
version jump, but the logic is an untested version, even if it should behave right, could be
almost alpha quality. If it doesn't explode on impact, it can be considered stable and thus
a 1.0 version.

# REVISION:
REVISION serves to tell Blackhole the modules revision, which is used to keep track of small
changes such as code cleaniness improvements, comment improvements and such. Revisions are
tiny changes which should not effect the module when it is run. My standard practice is that
all modules start with a value of "0", for each version (e.g if you bump from 1.0 to 1.1, it
should kick back to 0) and increment by one for each revision.

# REQUIRES:
REQUIRES serves to tell Blackhole the modules dependency information. This is very important
to Blackhole, as it is used to ensure the environment is in proper working order. This should
be set as needed, but my policy is to always add core to the REQUIRES line, so that people always
load it, because it ensures basic filtering and rules should be added later to deal with specific
things.

Section 2: How should a module be coded?
Simply put, there is no strict guidelines on this, my only recommendation is to try to keep it
fairly simple and not to go overboard with features for one module, split them out.
