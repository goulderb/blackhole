# qos-functions
# Written by: predatorfreak and Romster

qos_rate() {
	local DIRECTION ITEM VALUE TYPE
	DIRECTION="$1"
	ITEM="`echo $2 | cut -d'=' -f0`"
	VALUE="`echo $2 | cut -d'=' -f1 | sed -e 's/\(^[0-9]{1,3}\).*$/\1/'`"
	TYPE="`echo $2 | cut -d'=' -f1 | sed -e 's/^[0-9]{1,3}\(.*\)$/\1/'`"
	if [ ! $VALUE -eq $VALUE 2> /dev/null ]; then
		error "$DIRECTION QoS $ITEM value is not a number!"
	fi
	if [ $TYPE = 'kbit/s' ]; then
		if [ $VALUE -gt 0 ] && [ $VALUE -lt $QOS_OUT_RATE_MASTER ]; then
			RESULT="$VALUE"
			return 0
		else
			error "$DIRECTION QoS $ITEM value out of range."
		fi
	elif [ $TYPE = '%' ]; then
		if [ $VALUE -gt 0 ] && [ $VALUE -lt 100 ]; then
			RESULT="$[$VALUE * $QOS_OUT_RATE_MASTER / 100]"
			return 0
		else
			error "$DIRECTION QoS $ITEM value out of range."
		fi
	fi
	return 1
}

set_rate_line() {
	local ITEM VALUE TYPE
	if [ -z "$out_rate_line" ]; then
		error 'QoS out_rate_line not set.'
	fi
	ITEM="`echo "$out_rate_line" | cut -d'=' -f0`"
	VALUE="`echo "$out_rate_line" | cut -d'=' -f1 | sed -e 's/\(^[0-9]{1,3}\).*$/\1/'`"
	TYPE="`echo "$out_rate_line" | cut -d'=' -f1 | sed -e 's/^[0-9]{1,3}\(.*\)$/\1/'`"
	if [ ! $VALUE -eq $VALUE 2> /dev/null ]; then
		error "Output QoS $ITEM value is not a number!"
	fi
	if [ $TYPE = 'kbit/s' ]; then
		if [ $VALUE -gt 0 ]; then
			RESULT="$VALUE"
			return 0
		else
			error 'QoS out_rate_line value can not be zero.'
		fi
	else
		error 'QoS out_rate_line type unsupported.'
	fi
	return 1
}

set_rate_guaranteed() {
	local item
	if [ -z "$out_rate_guaranteed" ]; then
		error 'QoS out_rate_guaranteed is not set.'
	fi
	if [ "${out_rate_guaranteed[0]}" -gt 5 ]; then
		error 'QoS: out_rate_guaranteed too many parameters.'
	fi
	for item in `echo ${out_rate_guaranteed[@]}`; do
		case $item in
			realtime=*)
				qos_rate 'Output' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_OUT_RATE[1]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			high=*)
				qos_rate 'Output' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_OUT_RATE[2]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			medium=*)
				qos_rate 'Output' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_OUT_RATE[3]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			low=*)
				qos_rate 'Output' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_OUT_RATE[4]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			bulk=*)
				qos_rate 'Output' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_OUT_RATE[5]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			*)
				error "Output QoS unknown item $item"
			;;
		esac
	done
}

set_rate_max() {
	local item
	if [ -z "$out_rate_max" ]; then
		error 'QoS out_rate_guaranteed is not set.'
	fi
	if [ "${out_rate_max[0]}" -gt 5 ]; then
		error 'QoS: out_rate_max too many parameters.'
	fi
	for item in `echo ${out_rate_max[@]}`; do
		case $item in
			realtime=*)
				qos_rate 'Output' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_OUT_ULRATE[1]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			high=*)
				qos_rate 'Output' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_OUT_ULRATE[2]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			medium=*)
				qos_rate 'Output' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_OUT_ULRATE[3]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			low=*)
				qos_rate 'Output' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_OUT_ULRATE[4]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			bulk=*)
				qos_rate 'Output' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_OUT_ULRATE[5]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			*)
				error "Output QoS unknown item $item"
			;;
		esac
	done
	if [ -z "$in_rate_max" ]; then
		error 'QoS out_rate_guaranteed is not set.'
	fi
	if [ "${in_rate_max[0]}" -gt 5 ]; then
		error 'QoS: in_rate_max too many parameters.'
	fi
	for item in `echo ${in_rate_max[@]}`; do
		case $item in
			realtime=*)
				qos_rate 'Input' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_IN_ULRATE[1]="$RESULT"
				else
					error "qos_rate() did someting wrong."
				fi
			;;
			high=*)
				qos_rate 'Input' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_IN_ULRATE[2]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			medium=*)
				qos_rate 'Input' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_IN_ULRATE[3]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			low=*)
				qos_rate 'Input' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_IN_ULRATE[4]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			bulk=*)
				qos_rate 'Input' "$item"
				if [ ! $? -gt 0 ]; then
					QOS_IN_ULRATE[5]="$RESULT"
				else
					error "qos_rate() did something wrong."
				fi
			;;
			*)
				error "Input QoS unknown item $item"
			;;
		esac
	done
}

set_classes() {
	local rule item items TYPE VALUE MARK DPORT SPORT PROTOCOL
	if [ -z "$out_classes" ]; then
		error 'QoS out_classes is not set.'
	fi
	for rule in `echo ${out_classes[@]}`; do
		items=("$rule")
		for item in `echo ${items[@]}`; do
			ITEM="`echo $item | cut -d'=' -f0`"
			VALUE="`echo $item | cut -d'=' -f1`"
			case $ITEM in
				priority=*)
					case $VALUE in
						realtime)
							MARK='10'
						;;
						high)
							MARK='20'
						;;
						medium)
							MARK='30'
						;;
						low)
							MARK='40'
						;;
						bulk)
							MARK='50'
						;;
						*)
							error 'QoS out_classes priority value invalid.'
						;;
					esac
				;;
				dport=*)
					if [ ! $VALUE -eq $VALUE 2> /dev/null ]; then
						error 'QoS out_classes dport value is not a number.'
					fi
					if [ $VALUE -gt 0 ] && [ $VALUE -lt 65535 ]; then
						DPORT=$VALUE
					else
						error 'QoS out_classes dport out of range.'
					fi
				;;
				sport=*)
					if [ ! $VALUE -eq $VALUE 2> /dev/null ]; then
						error 'QoS out_classes sport value is not a number.'
					fi
					if [ $VALUE -gt 0 ] && [ $VALUE -lt 65535 ]; then
						SPORT=$VALUE
					else
						error 'QoS out_classes sport out of range.'
					fi
				;;
				protocol=*)
					case $VALUE in
						tcp)
							PROTOCOL=tcp
						;;
						udp)
							PROTOCOL=udp
						;;
						icmp)
							PROTOCOL=icmp
						;;
						*)
							error 'QoS out_classes protocol unknown.'
						;;
					esac
				;;
				*)
					error "QoS out_classes unknown item."
				;;
			esac
		done
		QOS_OUT_RULES=("${QOS_OUT_RULES[@]}" "protocol=$PROTOCOL sport=$SPORT dport=$DPORT mark=$MARK")
		unset PROTOCOL SPORT DPORT MARK
	done
}
